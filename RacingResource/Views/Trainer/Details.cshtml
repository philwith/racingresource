@model RacingResource.Models.Trainer
@using BootstrapSupport
@using LinqToTwitter

@{
    ViewBag.Title = Model.Forename + " " + Model.Surname;
    List<Status> tweets = (List<Status>)ViewData["Tweets"];
}

<h1>@(Model.Forename + " " + Model.Surname)</h1>

<div class="row">

    @if(tweets != null)
    {
        <div class="span6">
            <h3>Latest Tweets</h3>
            <div class="twitterFeed">
                <ul>
                    @foreach (var tweet in tweets)
                    {
                        <li>
                            <img src="@tweet.User.ProfileImageUrl" />
                            @tweet.Text
                        </li>
                }
                </ul>
            </div>
        </div>
    }
    <div class="span6">
        <fieldset>
            <legend>Trainer <small>Details</small></legend>
            <dl class="dl-horizontal">
                <!-- use this class on the dl if you want horizontal styling http://twitter.github.com/bootstrap/base-css.html#typography  class="dl-horizontal"-->
                <dt>Licence
                </dt>
                <dd>
                    @Model.LicenceType
                </dd>
                <dt>Region
                </dt>
                <dd>
                    @Model.Address.AddressRegion
                </dd>
                <dt>Postcode
                </dt>
                <dd id="postcode">
                    @Model.Address.PostalCode
                </dd>
                <dt>Horses
                </dt>
                <dd>
                    @(Model.Horses == null ? 0 : Model.Horses.Count())
                </dd>
            </dl>
        </fieldset>
        <h4>Locate on the Map</h4>
        <div id="map-canvas"></div>
    </div>
</div>

<h4>Horses in Training</h4>
<table class="table table-striped">
    <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Foaled
            </th>
            <th>
                Sex
            </th>
            <th></th>
        </tr>
    </thead>
@foreach (var item in Model.Horses) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.YearOfBirth)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Sex)
        </td>
         <td>
                <div class="btn-group">
                    <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">
                        Action
                        <span class="caret"></span>
                    </a>
                    <ul class="dropdown-menu">
                        @{                          
                            <li>@Html.ActionLink("Edit", "Edit", new { id=item.Id })</li>
                            <li>@Html.ActionLink("Details", "Details", new { id=item.Id })</li>
                            <li class="divider"></li>
                            <li>@Html.ActionLink("Delete", "Delete", new { id=item.Id })</li>   
                        }
                    </ul>
                </div>

            </td>
    </tr>
}

</table>
<p>
    @Html.ActionLink("Edit", "Edit", Model.GetIdValue()) |
    @Html.ActionLink("Back to List", "Index")
</p>

@section scripts {
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>
    <script type="text/javascript">
        var myCenter = new google.maps.LatLng(53, -1.33);

        var marker = new google.maps.Marker({
            position: myCenter,
            url: '/',
            animation: google.maps.Animation.DROP
        });

        var geocoder;

        function codeAddress(map) {
            var postcode = '@(Model.Address.PostalCode)';
            geocoder.geocode({ 'address': postcode }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    map.setCenter(results[0].geometry.location);
                    marker.position = results[0].geometry.location;
                    marker.setMap(map);
                } else {
                    alert('Geocode was not successful for the following reason: ' + status + ' ' + postcode);
                }
            });
        }

        function initialize() {
            geocoder = new google.maps.Geocoder();
            var mapProp = {
                center: myCenter,
                zoom: 10,
                draggable: false,
                scrollwheel: false,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };

            var map = new google.maps.Map(document.getElementById("map-canvas"), mapProp);

            codeAddress(map);
        }

        google.maps.event.addDomListener(window, 'load', initialize);
        google.maps.event.addListener(marker, 'click', function () { window.location.href = marker.url; });
    </script>
}
